@{
    ViewData["Title"] = "Admin Dashboard";
}

<script>
        // Mock Data for Products
        let products = [
            { id: 1, name: "Chocolate Fudge Cake", price: 29.99, category: "Cakes", stock: 15, desc: "Rich chocolate layered cake" },
            { id: 2, name: "Butter Croissant", price: 3.99, category: "Pastries", stock: 50, desc: "Flaky and buttery" },
            { id: 3, name: "Sourdough Bread", price: 5.49, category: "Bread", stock: 30, desc: "Crusty artisan loaf" },
            { id: 4, name: "Blueberry Muffin", price: 2.99, category: "Pastries", stock: 40, desc: "Fresh blueberries inside" },
            { id: 5, name: "Vanilla Cupcake", price: 3.50, category: "Cakes", stock: 25, desc: "Classic vanilla flavor" },
            { id: 6, name: "Cinnamon Roll", price: 4.25, category: "Pastries", stock: 20, desc: "Sweet and spicy glaze" },
            { id: 7, name: "Whole Wheat Loaf", price: 4.99, category: "Bread", stock: 35, desc: "Healthy whole grain" },
            { id: 8, name: "Raspberry Danish", price: 3.75, category: "Pastries", stock: 18, desc: "Tangy raspberry filling" },
            { id: 9, name: "Red Velvet Cake", price: 32.99, category: "Cakes", stock: 10, desc: "Cream cheese frosting" },
            { id: 10, name: "Chocolate Chip Cookie", price: 1.99, category: "Cookies", stock: 100, desc: "Soft and chewy" },
            { id: 11, name: "Oatmeal Raisin Cookie", price: 1.99, category: "Cookies", stock: 80, desc: "Hearty and sweet" },
            { id: 12, name: "Bagel (Plain)", price: 2.50, category: "Bread", stock: 45, desc: "Perfect for breakfast" },
            { id: 13, name: "Lemon Tart", price: 5.99, category: "Desserts", stock: 12, desc: "Zesty and creamy" },
            { id: 14, name: "Apple Pie", price: 15.99, category: "Desserts", stock: 8, desc: "Classic homemade taste" },
            { id: 15, name: "Carrot Cake", price: 28.50, category: "Cakes", stock: 14, desc: "Spiced with walnuts" },
            { id: 16, name: "Pecan Pie", price: 18.99, category: "Desserts", stock: 5, desc: "Sweet pecan filling" },
            { id: 17, name: "Almond Biscotti", price: 2.49, category: "Cookies", stock: 60, desc: "Crunchy coffee dipper" },
            { id: 18, name: "French Baguette", price: 3.99, category: "Bread", stock: 25, desc: "Crisp and airy" },
            { id: 19, name: "Strawberry Shortcake", price: 6.99, category: "Desserts", stock: 10, desc: "Light and fruity" },
            { id: 20, name: "Double Chocolate Brownie", price: 3.25, category: "Desserts", stock: 30, desc: "Extra fudgy" }
        ];

        // Load data from localStorage if available
        function loadData() {
            const savedProducts = localStorage.getItem('products');
            if (savedProducts) products = JSON.parse(savedProducts);
        }

        // Save data to localStorage
        function saveData() {
            localStorage.setItem('products', JSON.stringify(products));
        }

        // Render Products for Admin Dashboard
        function renderProducts() {
            const productList = document.getElementById('productList');
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();
            const categoryFilter = document.getElementById('categoryFilter').value;
            productList.innerHTML = '';

            const filteredProducts = products.filter(product => {
                const matchesSearch = product.name.toLowerCase().includes(searchTerm);
                const matchesCategory = categoryFilter === '' || product.category === categoryFilter;
                return matchesSearch && matchesCategory;
            });

            filteredProducts.forEach(product => {
                const tr = document.createElement('tr');
                tr.innerHTML = `
                    <td>${product.id}</td>
                    <td>${product.name}</td>
                    <td>$${product.price.toFixed(2)}</td>
                    <td>${product.category}</td>
                    <td>${product.stock}</td>
                    <td>${product.desc || 'N/A'}</td>
                    <td><button class="delete-btn" onclick="deleteProduct(${product.id})">Delete</button></td>
                `;
                productList.appendChild(tr);
            });
        }

        // Add New Product
        function addProduct() {
            const nameInput = document.getElementById('productName');
            const priceInput = document.getElementById('productPrice');
            const categoryInput = document.getElementById('productCategory');
            const stockInput = document.getElementById('productStock');
            const descInput = document.getElementById('productDesc');

            const name = nameInput.value.trim();
            const price = parseFloat(priceInput.value);
            const category = categoryInput.value;
            const stock = parseInt(stockInput.value);
            const desc = descInput.value.trim();

            if (name && !isNaN(price) && price > 0 && category && !isNaN(stock) && stock >= 0) {
                const newId = products.length > 0 ? Math.max(...products.map(p => p.id)) + 1 : 1;
                products.push({ id: newId, name, price, category, stock, desc });
                nameInput.value = '';
                priceInput.value = '';
                categoryInput.value = '';
                stockInput.value = '';
                descInput.value = '';
                saveData();
                renderProducts();
                renderStats();
            } else {
                alert('Please fill in all required fields with valid values.');
            }
        }

        // Delete Product
        function deleteProduct(id) {
            if (confirm('Are you sure you want to delete this product?')) {
                products = products.filter(p => p.id !== id);
                saveData();
                renderProducts();
                renderStats();
            }
        }

        // Render Statistics
        function renderStats() {
            const statsGrid = document.getElementById('statsGrid');
            statsGrid.innerHTML = '';

            const totalProducts = products.length;
            const lowStock = products.filter(p => p.stock < 10).length;
            const categories = [...new Set(products.map(p => p.category))];
            const categoryCount = categories.map(cat => ({
                name: cat,
                count: products.filter(p => p.category === cat).length
            }));

            statsGrid.innerHTML += `
                <div class="stat-card">
                    <h3>Total Products</h3>
                    <p>${totalProducts}</p>
                </div>
                <div class="stat-card">
                    <h3>Low Stock Items (<10)</h3>
                    <p>${lowStock}</p>
                </div>
            `;

            categoryCount.forEach(cat => {
                statsGrid.innerHTML += `
                    <div class="stat-card">
                        <h3>${cat.name}</h3>
                        <p>${cat.count}</p>
                    </div>
                `;
            });
        }

        // Tab Navigation
        function showTab(tabId) {
            document.querySelectorAll('.tab').forEach(tab => tab.classList.remove('active'));
            document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
            document.querySelector(`[onclick="showTab('${tabId}')"]`).classList.add('active');
            document.getElementById(tabId).classList.add('active');
        }

        // Initialize Dashboard
        function init() {
            loadData();
            renderProducts();
            renderStats();
        }

        window.onload = init;
    </script>


<style>
    body {
        font-family: Arial, sans-serif;
        margin: 0;
        background-color: #f5f5f5;
    }

    .container {
        max-width: 1400px;
        margin: 0 auto;
    }

    .dashboard {
        background: white;
        padding: 20px;
        border-radius: 5px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }

    h1 {
        color: #333;
        margin-bottom: 20px;
    }

    .tabs {
        display: flex;
        margin-bottom: 20px;
    }

    .tab {
        padding: 10px 20px;
        cursor: pointer;
        background-color: #e0e0e0;
        border: 1px solid #ccc;
        border-radius: 5px 5px 0 0;
        margin-right: 5px;
    }

        .tab.active {
            background-color: white;
            border-bottom: 1px solid white;
            margin-bottom: -1px;
        }

    .tab-content {
        display: none;
        border: 1px solid #ccc;
        padding: 20px;
        border-radius: 0 5px 5px 5px;
    }

        .tab-content.active {
            display: block;
        }

    table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
    }

    th, td {
        border: 1px solid #ddd;
        padding: 10px;
        text-align: left;
    }

    th {
        background-color: #f2f2f2;
        cursor: pointer;
    }

        th:hover {
            background-color: #e0e0e0;
        }

    .form-group {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
        margin: 20px 0;
    }

    input, select, button {
        padding: 10px;
        margin: 5px 0;
        border: 1px solid #ccc;
        border-radius: 4px;
    }

    button {
        background-color: #4CAF50;
        color: white;
        border: none;
        cursor: pointer;
    }

        button:hover {
            background-color: #45a049;
        }

    .delete-btn {
        background-color: #f44336;
    }

        .delete-btn:hover {
            background-color: #da190b;
        }

    .search-filter {
        display: flex;
        gap: 10px;
        margin-bottom: 20px;
    }

    .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 20px;
        margin-bottom: 20px;
    }

    .stat-card {
        background-color: #f9f9f9;
        padding: 20px;
        border-radius: 5px;
        text-align: center;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }

        .stat-card h3 {
            margin: 0;
            color: #555;
        }

        .stat-card p {
            font-size: 24px;
            color: #333;
            margin: 10px 0 0;
        }

        flex-direction: column;
    }

    }
</style>

<div class="container">
    <div class="dashboard">
        <h1>Admin Dashboard</h1>

        <div class="tabs">
            <div class="tab active" onclick="showTab('products')">Products</div>
            <div class="tab" onclick="showTab('stats')">Statistics</div>
        </div>

        <div id="products" class="tab-content active">
            <h2>Manage Products</h2>
            <div class="form-group">
                <input type="text" id="productName" placeholder="Product Name" required>
                <input type="number" id="productPrice" placeholder="Price ($)" step="0.01" min="0" required>
                <select id="productCategory" required>
                    <option value="">Select Category</option>
                    <option value="Cakes">Cakes</option>
                    <option value="Pastries">Pastries</option>
                    <option value="Bread">Bread</option>
                    <option value="Cookies">Cookies</option>
                    <option value="Desserts">Desserts</option>
                </select>
                <input type="number" id="productStock" placeholder="Stock Quantity" min="0" required>
                <input type="text" id="productDesc" placeholder="Description (optional)">
                <button onclick="addProduct()">Add Product</button>
            </div>

            <div class="search-filter">
                <input type="text" id="searchInput" placeholder="Search by name..." onkeyup="renderProducts()">
                <select id="categoryFilter" onchange="renderProducts()">
                    <option value="">All Categories</option>
                    <option value="Cakes">Cakes</option>
                    <option value="Pastries">Pastries</option>
                    <option value="Bread">Bread</option>
                    <option value="Cookies">Cookies</option>
                    <option value="Desserts">Desserts</option>
                </select>
            </div>

            <table id="productsTable">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Name</th>
                        <th>Price</th>
                        <th>Category</th>
                        <th>Stock</th>
                        <th>Description</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody id="productList"></tbody>
            </table>
        </div>

        <div id="stats" class="tab-content">
            <h2>Bakery Statistics</h2>
            <div class="stats-grid" id="statsGrid"></div>
        </div>
    </div>
</div>