@model List<Product>
@{
    ViewData["Title"] = "Products";
}

<script>

    document.addEventListener('DOMContentLoaded', function () {
        // Select all add-to-cart buttons
        const addToCartButtons = document.querySelectorAll('.add-to-cart');

        // Add click event listener to each button
        addToCartButtons.forEach(button => {
            button.addEventListener('click', function (event) {
                // Prevent the default action of the button if it's a form submission
                event.preventDefault();

                // Get the product name and price from data attributes
                const productName = this.getAttribute('data-product-name');
                const productPrice = this.getAttribute('data-product-price');

                // Show an alert
                alert(`Added ${productName} to your cart for ${productPrice}!`);

                // Here you would typically send this data to your server or update a local cart
                // For example:
                // addToCart(productName, productPrice);
            });
        });
    });

</script>

<style>


    body {
        font-family: Arial, sans-serif;
        background-color: #f8f8f8;
        margin: 0;
        padding: 0;
        color: rgb(44, 62, 80); /* Text color for body */
    }

    .container {
        width: 90%;
        margin: 0 auto;
        padding: 20px;
    }

    .page-title {
        text-align: center;
        color: rgb(44, 62, 80); /* Main color for the title */
        margin-bottom: 30px;
    }

    .products-grid {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: 20px;
    }

    .product-item {
        background-color: #fff;
        border: 1px solid #ddd;
        border-radius: 5px;
        padding: 15px;
        text-align: center;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

        .product-item:hover {
            transform: scale(1.05);
            box-shadow: 0 4px 8px rgba(44, 62, 80, 0.2); /* Subtle shadow with main color on hover */
            border-color: rgb(44, 62, 80); /* Border color on hover */
        }

    .product-image {
        max-width: 100%;
        height: auto;
        border-radius: 5px;
    }

    .product-name {
        font-size: 18px;
        color: rgb(44, 62, 80); /* Main color for product names */
        margin: 10px 0;
    }

    .product-price {
        font-size: 16px;
        color: rgb(44, 62, 80); /* Keeping the original color for price */
        font-weight: bold;
    }

    /* Add this for a button or link if you want to include one */
    .add-to-cart {
        background-color: rgb(44, 62, 80);
        color: white;
        border: none;
        padding: 10px 15px;
        border-radius: 5px;
        cursor: pointer;
        text-decoration: none;
        display: inline-block;
        margin-top: 10px;
        transition: background-color 0.3s ease;
    }

        .add-to-cart:hover {
            background-color: rgba(44, 62, 80, 0.8);
        }

</style>
<!--SEARCH BAR-->
<div class="row justify-content-center mb-5">
    <div class="col-12 col-md-10 col-lg-5">
        <form class="card card-sm border-0" id="searchForm" action="/Product/Index" method="get" autocomplete="off">
            <div class="card-body row">
                <div class="col">
                    <div class="input-group">
                        <input type="text" id="searchString" name="searchString" class="form-control form-control-lg rounded"
                               autocomplete="off" onkeyup="XAjaxRequest(this.value);" placeholder="Search products" required>
                    </div>
                </div>

                <div class="col-auto">
                    <button class="btn btn-lg btn-success" type="submit"> search</button>
                </div>
            </div>
        </form>
        <div id="autoSuggestContainer" class="autoSuggest" style="border: none;"></div>
    </div>
</div>
@{


}
<div class="container">
    <h1 class="page-title">Our Bakery Products</h1>
    <div class="products-grid">
        <!-- Product 1 -->
        @foreach (var item in Model)
        {

            <div class="col mb-4">
                <div class="card h-100 card-format">
                    <a asp-action="Details" asp-route-id="@item.ProductId">
                        <img src="@Url.Content("~/uploads/" + item.ImageUrl)" alt="Product Image" class="card-img-top">
                    </a>
                    <div class="card-body">
                        <a asp-action="Details" asp-route-id="@item.ProductId" class="no-link-style">
                            <h5 class="card-title text-center mb-4">@Html.DisplayFor(modelItem => item.Name)</h5>
                            <h6 class="card-subtitle mb-3">@Html.DisplayFor(modelItem => item.Category)</h6>
                        </a>
                        <p class="card-text mb-1">@Html.Raw(item.Description)</p>
                    </div>
                    <div class="card-footer d-flex justify-content-between align-items-center">
                        <h6 class="card-title">$@Html.DisplayFor(modelItem => item.Price) <span class="currency">nzd</span></h6>
                        @if (item.StockQuantity > 0)
                        {
                            <a asp-controller="Cart" asp-action="AddToCart" asp-route-id="@item.ProductId" class="btn btn-md btn-primary">Add to Cart</a>
                        }
                        else
                        {
                            <a>comming soon</a>
                        }
                    </div>
                    <!-- Add review count link -->
                    <div class="product-reviews" style="margin-top: 10px;">
                        <a asp-controller="Reviews" asp-action="Index" asp-route-productId="@item.ProductId"
                           style="color: rgb(44, 62, 80); font-size: 0.9em;">
                            @(item.Reviews?.Count ?? 0) reviews
                        </a>
                        </div>
                </div>
            </div>
        }

    </div>
</div>
@*auto suggestion*@
<script type="text/javascript">
    function XAjaxRequest(searchString) {
        if (searchString.length < 1) {
            autoSuggestContainer.innerHTML = "";
            autoSuggestContainer.classList.remove("show-border");
            return;
        } else {
            autoSuggestContainer.classList.add("show-border");
        }


        //alert("testing searchString=" + searchString);
        var xmlhttp;
        xmlhttp = new XMLHttpRequest();
        var url = "/Product/IndexAJAX?searchString=" + searchString;
        // open connection, GET is quick and simple, false: sync page will freeze
        xmlhttp.open("GET", url, false);
        // send the request to IndexAJAX
        xmlhttp.send();
        document.getElementById("autoSuggestContainer").style.display = "block";
        //need to clear out the container for a fresh auto-suggest list
        //else the auto-suggest list can keep growing and growing with additional user keyups
        document.getElementById("autoSuggestContainer").innerHTML = "";

        var messageObject = JSON.parse(xmlhttp.responseText); // receive the respose text

        var autoSuggestions = "";

        for (var i = 0; i < messageObject.length; i++) {
            //HTML code generation demo
            //Works together with the ".innerHTML" statement after the end of this "for" block
            autoSuggestions +=
                "<input type=\"button\" value=\"" + messageObject[i].Name + "\" "
                + "onclick=\"document.getElementById('searchString').value = this.value; document.getElementById('searchForm').submit();\" "
                + "style=\"background-color: #f2f2f2;\" />";

            autoSuggestions += "<br />";
        }
        //place the generated buttons HTML code inside the display div
        document.getElementById("autoSuggestContainer").innerHTML = autoSuggestions;
    }
</script>